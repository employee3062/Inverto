AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for Inverto Application.
Parameters:
  RootDomain:
    Type: String
    Description: The root domain for the application (e.g., example.com)
  SubDomain:
    Type: String
    Description: The subdomain for the application (e.g., app)
    Default: inverto
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate for the custom domain
  FunctionName:
    Type: String
    Description: The name of the Lambda function to integrate with API Gateway
    Default: inverto-lambda-function
  ChangeHash:
    Type: String
    Description: A hash value to force redeployment of API Gateway resources when changed
    Default: "100"
Resources:
  # we will need an rest api gateway at first
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: InvertoAPI
      Description: API Gateway for Inverto Application
      BinaryMediaTypes:
        - "*/*"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # we will need a cognito authorizer for the api gateway
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      ProviderARNs:
        - !GetAtt InvertoUserPool.Arn 

  # add a domain name for the api gateway
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${SubDomain}.${RootDomain}"
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  # create methods and resources for the api gateway
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:Green/invocations

  SwaggerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: swagger
      RestApiId: !Ref ApiGateway
  SwaggerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref SwaggerResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:Green/invocations
  SwaggerProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref SwaggerResource
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGateway
  SwaggerProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref SwaggerProxyResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:Green/invocations

  SigninResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: signin
      RestApiId: !Ref ApiGateway
  ApiAuthSigninMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SigninResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:Green/invocations

  CatchAllResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGateway
  CatchAllMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref CatchAllResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      ApiKeyRequired: true
      Integration: 
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}:Green/invocations

  # we will deploy the api gateway standalone for now without stages
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - HealthMethod
      - ApiAuthSigninMethod
      - CatchAllMethod
      - SwaggerMethod
      - SwaggerProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway
    Metadata:
      ChangeHash: !Ref ChangeHash
  
  # we will need a log group for the api gateway
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/inverto-api-logs
      RetentionInDays: 30

  # create a stage for the API Gateway with logging enabled
  ApiGatewayStageWithLogs:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Production Stage with Logging
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
    Metadata:
      ChangeHash: !Ref ChangeHash

  # create usage plans and assign it with stage prod
  SilverPlan:
    DependsOn: ApiGatewayStageWithLogs
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: SilverPlan
      Description: Silver plan with 10,000 requests per hour, 100,000 per 10 hours
      Quota:
        Limit: 100000      
        Period: DAY
      Throttle:
        RateLimit: 5       
        BurstLimit: 10
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: prod
      
  GoldPlan:
    DependsOn: ApiGatewayStageWithLogs
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: GoldPlan
      Description: Gold plan with 50,000 requests per hour, 500,000 per 10 hours
      Quota:
        Limit: 500000      
        Period: DAY
      Throttle:
        RateLimit: 15    
        BurstLimit: 30
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: prod     

  PlatinumPlan:
    DependsOn: ApiGatewayStageWithLogs
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: PlatinumPlan
      Description: Platinum plan with 100,000 requests per hour, 1,000,000 per 10 hours
      Quota:
        Limit: 1000000     
        Period: DAY
      Throttle:
        RateLimit: 30      
        BurstLimit: 60
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: prod    

  # configure base path mapping for the domain name
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayStageWithLogs
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGateway
      Stage: prod

  # create a record set in route53 for the domain name
  ApiDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${RootDomain}."
      Name: !Sub "${SubDomain}.${RootDomain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId

  # we need two roles for the api gateway to access cloudwatch logs and lambda
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-apigateway-cloudwatch-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-${FunctionName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: inverto-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminSetUserPassword
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${InvertoUserPool} 
              - Effect: Allow             
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:CreateSecret
                  - secretsmanager:PutSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:inverto/*
                Condition:
                  StringLike:
                    secretsmanager:Name: "inverto/*"
              - Effect: Allow           
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*

  # we need one permission for the lambda to be invoked by api gateway
  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaAlias
    Properties:
      FunctionName: !Sub ${LambdaFunction.Arn}:Green
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  # assign the account settings with API gateway role for cloudwatch logs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  # create a user pool for storing users
  InvertoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: inverto-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
        - Name: phone_number
          Required: false
          Mutable: true

  # create a lambda function for handling requests and it's layers,version,alias
  BunLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: bun-runtime-layer
      Description: Bun runtime layer for Lambda functions
      Content:
        S3Bucket: storage3062
        S3Key: personal/bun-lambda-layer.zip  
      CompatibleRuntimes:
        - provided.al2
      CompatibleArchitectures:
        - arm64

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: handler.fetch
      Role: !GetAtt ApiGatewayLambdaRole.Arn
      Runtime: provided.al2
      Architectures:
        - arm64
      Code:
        S3Bucket: storage3062
        S3Key: personal/handler.zip
      MemorySize: 128
      Timeout: 10
      Layers:
        - !Ref BunLayer
      Environment:
        Variables:
          SERVER_MODE: OFF

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: 0.0.0

  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Name: Green
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version

  GithubOidcRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GithubOidc.Arn
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: repo:employee3062/Inverto:refs/heads/*
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Policies:
        - PolicyName: GithubActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:PublishVersion
                  - lambda:UpdateAlias
                  - lambda:GetAlias
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunctionConfiguration
                  - lambda:ListAliases
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}
  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
        
Outputs:
  GithubOidcRoleArn:
    Description: "ARN of the IAM Role for GitHub OIDC"
    Value: !GetAtt GithubOidcRole.Arn
